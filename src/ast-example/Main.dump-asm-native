
==================== Native code ====================

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
$trModule1_rHj_bytes:
	.string "main"


==================== Native code ====================

.section .data
.align 8
.align 1
$trModule2_rHp_closure:
	.quad	TrNameS_con_info
	.quad	$trModule1_rHj_bytes


==================== Native code ====================

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
$trModule3_rHq_bytes:
	.string "Main"


==================== Native code ====================

.section .data
.align 8
.align 1
$trModule4_rHr_closure:
	.quad	TrNameS_con_info
	.quad	$trModule3_rHq_bytes


==================== Native code ====================

.section .data
.align 8
.align 1
.globl $trModule_closure
.type $trModule_closure, @object
$trModule_closure:
	.quad	Module_con_info
	.quad	$trModule2_rHp_closure+1
	.quad	$trModule4_rHr_closure+1
	.quad	3


==================== Native code ====================

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	$fMonadIO_closure-(main_info)+0
.globl main_info
.type main_info, @function
main_info:
_cIp:
	movq %rbx,%vI_rg9
	leaq -32(%rbp),%vI_nIt
	cmpq %r15,%vI_nIt
	jb _cIq
	jmp _cIr
_cIn:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %vI_cIm,-8(%rbp)
	movl $$fMonadIO_closure,%r14d
	movq $stg_ap_p_info,-32(%rbp)
	movq $()_closure+1,-24(%rbp)
	addq $-32,%rbp
	jmp return_info
_cIo:
	jmp *(%vI_rg9)
_cIq:
	movq %vI_rg9,%rbx
	jmp *-16(%r13)
_cIr:
	subq $8,%rsp
	movq %r13,%vI_nIu
	movq %vI_rg9,%rsi
	movq %vI_nIu,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	movq %rax,%vI_cIm
	testq %vI_cIm,%vI_cIm
	je _cIo
	jmp _cIn
	.size main_info, .-main_info


==================== Native code ====================

.section .data
.align 8
.align 1
.globl main_closure
.type main_closure, @object
main_closure:
	.quad	main_info
	.quad	0
	.quad	0
	.quad	0


==================== Native code ====================

.section .data
.align 8
.align 1
_uIG_srt:
	.quad	stg_SRT_2_info
	.quad	runMainIO_closure
	.quad	main_closure
	.quad	0


==================== Native code ====================

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	_uIG_srt-(main_info)+0
.globl main_info
.type main_info, @function
main_info:
_cID:
	movq %rbx,%vI_01D
	leaq -16(%rbp),%vI_nIJ
	cmpq %r15,%vI_nIJ
	jb _cIE
	jmp _cIF
_cIB:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %vI_cIA,-8(%rbp)
	movl $main_closure,%r14d
	movl $runMainIO_closure,%ebx
	addq $-16,%rbp
	jmp stg_ap_p_fast
_cIC:
	jmp *(%vI_01D)
_cIE:
	movq %vI_01D,%rbx
	jmp *-16(%r13)
_cIF:
	subq $8,%rsp
	movq %r13,%vI_nIK
	movq %vI_01D,%rsi
	movq %vI_nIK,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	movq %rax,%vI_cIA
	testq %vI_cIA,%vI_cIA
	je _cIC
	jmp _cIB
	.size main_info, .-main_info


==================== Native code ====================

.section .data
.align 8
.align 1
.globl main_closure
.type main_closure, @object
main_closure:
	.quad	main_info
	.quad	0
	.quad	0
	.quad	0


==================== Native code ====================

.section .text
.align 8
.align 8
	.quad	4294967301
	.quad	0
	.long	14
	.long	$fNumInteger_closure-(addOne_info)+0
.globl addOne_info
.type addOne_info, @function
addOne_info:
_cIS:
	movq %r14,%vI_sI7
	leaq -24(%rbp),%vI_nIY
	cmpq %r15,%vI_nIY
	jb _cIT
	jmp _cIU
_cIT:
	movq %vI_sI7,%r14
	movl $addOne_closure,%ebx
	jmp *-8(%r13)
_cIU:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _cIW
	jmp _cIV
_cIV:
	movq $S#_con_info,-8(%r12)
	movq $1,(%r12)
	leaq -7(%r12),%vI_cIR
	movl $$fNumInteger_closure,%r14d
	movq $stg_ap_pp_info,-24(%rbp)
	movq %vI_sI7,-16(%rbp)
	movq %vI_cIR,-8(%rbp)
	addq $-24,%rbp
	jmp +_info
_cIW:
	movq $16,904(%r13)
	jmp _cIT
	.size addOne_info, .-addOne_info


==================== Native code ====================

.section .data
.align 8
.align 1
.globl addOne_closure
.type addOne_closure, @object
addOne_closure:
	.quad	addOne_info
	.quad	0

